# and obs_consequence is no (0)
# If all these criteria are met, they get a "socially accepted" score of 1.
# If not, they get a "socially accepted" score of 0.
cleaning$social_acceptance <- 0
cleaning$social_acceptance[cleaning$anonymity == 1 &
(cleaning$leave == 3 | cleaning$leave == 4) &
cleaning$mental_health_consequence == 0 &
cleaning$supervisor == 1 &
cleaning$obs_consequence == 0] <- 1
cleaning$ease_communication <- 0
cleaning$ease_communication[cleaning$coworkers > 1 &
cleaning$supervisor > 1 &
(cleaning$mental_health_interview == 1 | cleaning$phys_health_interview == 2) &
(cleaning$mental_health_consequence == 1 | cleaning$phys_health_consequence == 2)] <- 1
write.csv(cleaning, "./data/clean_data.csv")
################################################################################################
##################################### Dealing with work interfere ##############################
################################################################################################
#for now let's break the clean data set into two - one for people who have indicated that they
#have a mental illness, and one for people who did not. We can compare the experiences of those
#two groups against each other as we identify covariates of interest
illness_data <- cleaning %>%
filter(!is.na(cleaning$work_interfere))
write.csv(illness_data, "./data/illness_data.csv")
healthy_data <- cleaning %>%
filter(is.na(cleaning$work_interfere))
write.csv(healthy_data, "./data/healthy_data.csv")
glm_social <- glm(social_acceptance ~ mental_health_consequence, family=binomial(link='logit'),data=data)
data['predict'] = glm_social.predict()
glm_social.summary()
######################################################################
###################### Log Regressions ###############################
######################################################################
#read in data, get rid of state and country data
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere)
healthy_data <- read.csv("./data/healthy_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
illness_data <- read.csv("./data/illness_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
##predict and run log regressions
#predIll = glm.predict()
##running the log regression on all covariates
#log_regression <- function(covariate){
#  glm(social_acceptance ~ data[[covariate]], family=binomial(link='logit'),data=data)
#  return (glm_social)
#}
##running the log regression on all covariates & new variables
log_regression_com <- function(covariate, col) {
glm(col ~ data[[covariate]], family = binomial(link='logit'), data=data)
return (glm)
}
#predRed = glm.predict()
#data['def_pred_binary'] = (data['df_predict'] > 0.5)
#df['def_pred_binary'] = df['def_pred_binary'].apply(lambda x: 1 if x == True else 0)
#plt.show()
#data['df_predict'] = inter_model.predict()
for(covariate in colnames(data)){
log_regression(covariate)
}
glm_social <- glm(social_acceptance ~ mental_health_consequence, family=binomial(link='logit'),data=data)
data['predict'] = glm_social.predict()
glm_social.summary()
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere, -mental_health_consequence, -phys_health_consequence)
data <- data %>% select(Gender, self_employed, family_history, social_acceptance, treatment, no_employees, remote_work, tech_company,
benefits, care_options, wellness_program, seek_help, anonymity, leave, coworkers, supervisor)
glm_social <- glm(social_acceptance ~ ., family=binomial(link='logit'),data=data)
######################################################################
###################### Log Regressions ###############################
######################################################################
#read in data, get rid of state and country data
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere)
healthy_data <- read.csv("./data/healthy_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
illness_data <- read.csv("./data/illness_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
##predict and run log regressions
#predIll = glm.predict()
##running the log regression on all covariates
#log_regression <- function(covariate){
#  glm(social_acceptance ~ data[[covariate]], family=binomial(link='logit'),data=data)
#  return (glm_social)
#}
##running the log regression on all covariates & new variables
log_regression_com <- function(covariate, col) {
glm(col ~ data[[covariate]], family = binomial(link='logit'), data=data)
return (glm)
}
#predRed = glm.predict()
#data['def_pred_binary'] = (data['df_predict'] > 0.5)
#df['def_pred_binary'] = df['def_pred_binary'].apply(lambda x: 1 if x == True else 0)
#plt.show()
#data['df_predict'] = inter_model.predict()
for(covariate in colnames(data)){
log_regression(covariate)
}
#glm_social <- glm(social_acceptance ~ mental_health_consequence, family=binomial(link='logit'),data=data)
#data['predict'] = glm_social.predict()
#glm_social.summary()
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere, -mental_health_consequence, -phys_health_consequence)
data <- data %>% select(Gender, self_employed, family_history, social_acceptance, treatment, no_employees, remote_work, tech_company,
benefits, care_options, wellness_program, seek_help, anonymity, leave, coworkers, supervisor)
glm_social <- glm(social_acceptance ~ ., family=binomial(link='logit'),data=data)
glm_social.summary()
glm_social <- glm(social_acceptance ~ ., family=binomial(link='logit'),data=data)
glm_social.summary()
glm_social.summary()
######################################################################
###################### Log Regressions ###############################
######################################################################
#read in data, get rid of state and country data
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere)
healthy_data <- read.csv("./data/healthy_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
illness_data <- read.csv("./data/illness_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
##predict and run log regressions
#predIll = glm.predict()
##running the log regression on all covariates
#log_regression <- function(covariate){
#  glm(social_acceptance ~ data[[covariate]], family=binomial(link='logit'),data=data)
#  return (glm_social)
#}
##running the log regression on all covariates & new variables
log_regression_com <- function(covariate, col) {
glm(col ~ data[[covariate]], family = binomial(link='logit'), data=data)
return (glm_social)
}
#predRed = glm.predict()
#data['def_pred_binary'] = (data['df_predict'] > 0.5)
#df['def_pred_binary'] = df['def_pred_binary'].apply(lambda x: 1 if x == True else 0)
#plt.show()
#data['df_predict'] = inter_model.predict()
for(covariate in colnames(data)){
log_regression(covariate)
}
#glm_social <- glm(social_acceptance ~ mental_health_consequence, family=binomial(link='logit'),data=data)
#data['predict'] = glm_social.predict()
#glm_social.summary()
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere, -mental_health_consequence, -phys_health_consequence)
data <- data %>% select(Gender, self_employed, family_history, social_acceptance, treatment, no_employees, remote_work, tech_company,
benefits, care_options, wellness_program, seek_help, anonymity, leave, coworkers, supervisor)
glm_social <- glm(social_acceptance ~ ., family=binomial(link='logit'),data=data)
glm_social.summary()
glm.summary()
######################################################################
###################### Log Regressions ###############################
######################################################################
#read in data, get rid of state and country data
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere)
healthy_data <- read.csv("./data/healthy_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
illness_data <- read.csv("./data/illness_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
##predict and run log regressions
#predIll = glm.predict()
##running the log regression on all covariates
#log_regression <- function(covariate){
#  glm(social_acceptance ~ data[[covariate]], family=binomial(link='logit'),data=data)
#  return (glm_social)
#}
##running the log regression on all covariates & new variables
log_regression_com <- function(covariate, col) {
glm(col ~ data[[covariate]], family = binomial(link='logit'), data=data)
return (glm_social)
}
#predRed = glm.predict()
#data['def_pred_binary'] = (data['df_predict'] > 0.5)
#df['def_pred_binary'] = df['def_pred_binary'].apply(lambda x: 1 if x == True else 0)
#plt.show()
#data['df_predict'] = inter_model.predict()
for(covariate in colnames(data)){
log_regression(covariate)
}
#glm_social <- glm(social_acceptance ~ mental_health_consequence, family=binomial(link='logit'),data=data)
#data['predict'] = glm_social.predict()
#glm_social.summary()
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere, -mental_health_consequence, -phys_health_consequence)
data <- data %>% select(Gender, self_employed, family_history, social_acceptance, treatment, no_employees, remote_work, tech_company,
benefits, care_options, wellness_program, seek_help, anonymity, leave, coworkers, supervisor)
glm_social <- glm(social_acceptance ~ ., family=binomial(link='logit'),data=data)
glm_social.summary()
######################################################################
###################### Log Regressions ###############################
######################################################################
#read in data, get rid of state and country data
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere)
healthy_data <- read.csv("./data/healthy_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
illness_data <- read.csv("./data/illness_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
##predict and run log regressions
#predIll = glm.predict()
##running the log regression on all covariates
#log_regression <- function(covariate){
#  glm(social_acceptance ~ data[[covariate]], family=binomial(link='logit'),data=data)
#  return (glm_social)
#}
##running the log regression on all covariates & new variables
log_regression_com <- function(covariate, col) {
glm(col ~ data[[covariate]], family = binomial(link='logit'), data=data, maxit=100)
return (glm_social)
}
#predRed = glm.predict()
#data['def_pred_binary'] = (data['df_predict'] > 0.5)
#df['def_pred_binary'] = df['def_pred_binary'].apply(lambda x: 1 if x == True else 0)
#plt.show()
#data['df_predict'] = inter_model.predict()
for(covariate in colnames(data)){
log_regression(covariate)
}
#glm_social <- glm(social_acceptance ~ mental_health_consequence, family=binomial(link='logit'),data=data)
#data['predict'] = glm_social.predict()
#glm_social.summary()
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere, -mental_health_consequence, -phys_health_consequence)
data <- data %>% select(Gender, self_employed, family_history, social_acceptance, treatment, no_employees, remote_work, tech_company,
benefits, care_options, wellness_program, seek_help, anonymity, leave, coworkers, supervisor)
glm_social <- glm(social_acceptance ~ ., family=binomial(link='logit'),data=data)
glm_social.summary()
######################################################################
###################### Log Regressions ###############################
######################################################################
library(dplyr)
#read in data, get rid of state and country data
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere, -mental_health_consequence, -phys_health_consequence)
healthy_data <- read.csv("./data/healthy_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
illness_data <- read.csv("./data/illness_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
##running the log regression on all covariates
log_regression <- function(covariate){
l <- glm(social_acceptance ~ data[[covariate]], family=binomial(link='logit'), data=data, maxit=100)
print(summary(l))
return (l)
}
##running the log regression on all covariates & new variables
#log_regression_com <- function(covariate, col) {
#  glm(col ~ data[[covariate]], family = binomial(link='logit'), data=data)
#  return (glm)
#}
for(covariate in colnames(data)){
log_regression(covariate)
}
summary(glm(social_acceptance ~., family=binomial(link='logit'), data=data), maxit=100)
summary(glm(social_acceptance ~ Gender+self_employed, family=binomial(link='logit'), data=data, maxit=100))
glm_social <- glm(social_acceptance ~ mental_health_consequence, family=binomial(link='logit'),data=data)
data['predict'] = glm_social.predict()
glm_social.summary()
######################################################################
###################### Log Regressions ###############################
######################################################################
library(dplyr)
#read in data, get rid of state and country data
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere, -mental_health_consequence, -phys_health_consequence)
healthy_data <- read.csv("./data/healthy_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
illness_data <- read.csv("./data/illness_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
##running the log regression on all covariates
log_regression <- function(covariate){
l <- glm(social_acceptance ~ data[[covariate]], family=binomial(link='logit'), data=data, maxit=100)
print(summary(l))
return (l)
}
##running the log regression on all covariates & new variables
#log_regression_com <- function(covariate, col) {
#  glm(col ~ data[[covariate]], family = binomial(link='logit'), data=data)
#  return (glm)
#}
for(covariate in colnames(data)){
log_regression(covariate)
}
summary(glm(social_acceptance ~., family=binomial(link='logit'), data=data), maxit=100)
summary(glm(social_acceptance ~ Gender+self_employed, family=binomial(link='logit'), data=data, maxit=100))
glm_social <- glm(social_acceptance ~ mental_health_consequence, family=binomial(link='logit'),data=data)
glm_social <- glm(social_acceptance ~ mental_health_consequence, family=binomial(link='logit'),data=data)
View(cleaning)
######################################################################
###################### Log Regressions ###############################
######################################################################
library(dplyr)
#read in data, get rid of state and country data
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere, -mental_health_consequence, -phys_health_consequence)
healthy_data <- read.csv("./data/healthy_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
illness_data <- read.csv("./data/illness_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
##running the log regression on all covariates
log_regression <- function(covariate){
l <- glm(social_acceptance ~ data[[covariate]], family=binomial(link='logit'), data=data, maxit=100)
print(summary(l))
return (l)
}
##running the log regression on all covariates & new variables
#log_regression_com <- function(covariate, col) {
#  glm(col ~ data[[covariate]], family = binomial(link='logit'), data=data)
#  return (glm)
#}
for(covariate in colnames(data)){
log_regression(covariate)
}
summary(glm(social_acceptance ~., family=binomial(link='logit'), data=data), maxit=100)
summary(glm(social_acceptance ~ Gender+self_employed, family=binomial(link='logit'), data=data, maxit=100))
View(cleaning)
#glm_social <- glm(social_acceptance ~ , family=binomial(link='logit'),data=data)
summary(glm(social_acceptance ~., family=binomial(link='logit'), data=data), maxit=100)
######################################################################
###################### Log Regressions ###############################
######################################################################
library(dplyr)
#read in data, get rid of state and country data
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere, -mental_health_consequence, -phys_health_consequence)
healthy_data <- read.csv("./data/healthy_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
illness_data <- read.csv("./data/illness_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
##running the log regression on all covariates
log_regression <- function(covariate){
l <- glm(social_acceptance ~ data[[covariate]], family=binomial(link='logit'), data=data, maxit=100)
print(summary(l))
return (l)
}
##running the log regression on all covariates & new variables
#log_regression_com <- function(covariate, col) {
#  glm(col ~ data[[covariate]], family = binomial(link='logit'), data=data)
#  return (glm)
#}
for(covariate in colnames(data)){
log_regression(covariate)
}
summary(glm(social_acceptance ~., family=binomial(link='logit'), data=data), maxit=100)
summary(glm(social_acceptance ~ Gender+self_employed, family=binomial(link='logit'), data=data, maxit=100))
View(cleaning)
glm_social <- glm(social_acceptance ~ benefits, family=binomial(link='logit'),data=data)
glm_social <- glm(social_acceptance ~ benefits, family=binomial(link='logit'),data=data)
glm_social
summary(glm(social_acceptance ~., family=binomial(link='logit'), data=data), maxit=100)
glm_social
summary(glm(social_acceptance ~., family=binomial(link='logit'), data=data), maxit=100)
glm_social <- glm(social_acceptance ~ benefits, family=binomial(link='logit'),data=data)
glm_social
source('regressions.R')
roc.plot(cleaning$social_acceptance, cleaning$Gender)
######################################################################
###################### Log Regressions ###############################
######################################################################
library(ROCR)
library(dplyr)
#read in data, get rid of state and country data
data <-read.csv("./data/clean_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X, -work_interfere, -mental_health_consequence, -phys_health_consequence)
healthy_data <- read.csv("./data/healthy_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
illness_data <- read.csv("./data/illness_data.csv", stringsAsFactors = FALSE) %>% select(-state, -Country, -X)
##running the log regression on all covariates
log_regression <- function(covariate){
l <- glm(social_acceptance ~ data[[covariate]], family=binomial(link='logit'), data=data, maxit=100)
print(summary(l))
return (l)
}
##running the log regression on all covariates & new variables
#log_regression_com <- function(covariate, col) {
#  glm(col ~ data[[covariate]], family = binomial(link='logit'), data=data)
#  return (glm)
#}
for(covariate in colnames(data)){
log_regression(covariate)
}
summary(glm(social_acceptance ~., family=binomial(link='logit'), data=data), maxit=100)
summary(glm(social_acceptance ~ Gender+self_employed, family=binomial(link='logit'), data=data, maxit=100))
View(cleaning)
glm_social <- glm(social_acceptance ~ benefits, family=binomial(link='logit'),data=data)
roc.plot(cleaning$social_acceptance, cleaning$Gender)
library(ROCR)
install.packages(ROCR)
install.packages("ROCR")
library(ROCR)
roc.plot(cleaning$social_acceptance, cleaning$Gender)
source('regressions.R')
roc.plot()
library(ROCR)
data(ROCR.simple)
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
perf <- performance(pred,"tpr","fpr")
plot(perf)
## precision/recall curve (x-axis: recall, y-axis: precision)
perf1 <- performance(pred, "prec", "rec")
plot(perf1)
## sensitivity/specificity curve (x-axis: specificity,
## y-axis: sensitivity)
perf1 <- performance(pred, "sens", "spec")
plot(perf1)
# fit_glm <- glm(bad_widget ~ x, training_set, family=binomial(link="logit"))
#
# glm_link_scores <- predict(fit_glm, test_set, type="link")
#
# glm_response_scores <- predict(fit_glm, test_set, type="response")
#
# score_data <- data.frame(link=glm_link_scores,
#                          response=glm_response_scores,
#                          bad_widget=test_set$bad_widget,
#                          stringsAsFactors=FALSE)
#
# score_data %>%
#   ggplot(aes(x=link, y=response, col=bad_widget)) +
#   scale_color_manual(values=c("black", "red")) +
#   geom_point() +
#   geom_rug() +
#   ggtitle("Both link and response scores put cases in the same order")
plot(perf1)
data(ROCR.simple)
View(data)
View(data(ROCR.simple))
pred <- prediction( ROCR.simple$predictions, ROCR.simple$labels)
pred
pred <- prediction( data$predictions, data$labels)
test_set <- sample(1:nrow(data), size=floor(nrow(data)/4))
test_set
View(data)
View(test_set)
test_set <- sample(1:nrow(data), size=floor(nrow(data)/4))
View(test_set)
test_set <- data(1:nrow(data), size=floor(nrow(data)/4))
test_set <- sample(1:nrow(data), size=floor(nrow(data)/4))
View(data)
View(test_set)
test_set <- sample(1:nrow(data), size)
View(test_set)
test_set <- sample(1:nrow(data), size)
test_set <- sample(1:nrow(data))
View(test_set)
smp_size <- floor(0.75 * nrow(data))
test_set <- sample(1:nrow(data), size = smp_size)
View(test_set)
set.seed(123)
set.seed(123)
smp_size <- floor(0.75 * nrow(data))
set.seed(123)
test_set <- sample(seq_len(nrow(data)), size = smp_size)
View(test_set)
View(test_set)
View(test_set)
test_set[2] <- sample(seq_len(nrow(data)), size = smp_size)
View(test_set)
test_set[1] <- sample(seq_len(nrow(data)), size = smp_size)
View(test_set)
smp_size <- floor(0.75 * nrow(data))
set.seed(123)
test_set <- sample(seq_len(nrow(data)), size = smp_size, replace = F)
View(test_set)
train<-sample_frac(data, 0.7)
sid<-as.numeric(rownames(train)) # because rownames() returns character
test<-data[-sid,]
test
View(test)
nrow(data)
nrow(test)
nrow(test)
nrow(data)
nrow(test)
nrow(train)
test %>%
ggplot(aes(x=x, y=y, col=supervisor)) +
scale_color_manual(values=c("black", "red")) +
geom_point() +
ggtitle("Bad widgets related to x")
library(ggplot2)
test %>%
ggplot(aes(x=x, y=y, col=supervisor)) +
scale_color_manual(values=c("black", "red")) +
geom_point() +
ggtitle("Bad widgets related to x")
glm_predict <- predict(glm_social, test_set, type="link")
glm_social <- glm(social_acceptance ~ benefits, family=binomial(link='logit'),data=data)
glm_social
summary(glm(social_acceptance ~., family=binomial(link='logit'), data=data), maxit=100)
glm_model <- glm(social_acceptance ~., family=binomial(link='logit'), data=data), maxit=100
glm_model <- glm(social_acceptance ~., family=binomial(link='logit'), data=data), maxit=100)
glm_model <- (glm(social_acceptance ~., family=binomial(link='logit'), data=data))
glm_model
summary(glm_model)
glm_predict <- predict(glm_social, test_set, type="link")
new <- data.frame(Social_pred = df$social_acceptance)
predict(glm_model, newdata = new, interval="confidence")
newdata = data.frame(treatment = 1, disp = 180)
newdata
predict(glm_model, newdata, type='response')
help("predict.glm")
help("prediction")
glm_model <- (glm(social_acceptance ~., family=binomial(link='logit'), data=data))
summary(glm_model)
fity_ypos <- glm_model$fitted[y == 1]
fity_yneg <- glm_model$fitted[y == 0]
fity_ypos <- glm_model$fitted[social_acceptance == 1]
fity_yneg <- glm_model$fitted[social_acceptance == 0]
data
View(data)
glm_model <- (glm(social_acceptance ~., family=binomial(link='logit'), data=data))
summary(glm_model)
fity_ypos <- glm_model$fitted[social_acceptance == 1]
fity_ypos <- glm_model$fitted[data$social_acceptance == 1]
fity_yneg <- glm_model$fitted[sata$social_acceptance == 0]
fity_yneg <- glm_model$fitted[data$social_acceptance == 0]
fity_ypos <- glm_model$fitted[data$social_acceptance == 1]
sort_fity <- sort(glm_model$fitted.values)
sens <- 0
spec_c <- 0
for (i in length(sort_fity):1){
sens <- c(sens, mean(fity_ypos >= sort_fity[i]))
spec_c <- c(spec_c, mean(fity_yneg >= sort_fity[i]))
}
fity_ypos2 <- as.numeric(glm_model$pred[y == 1]) - 1
fity_yneg2 <- as.numeric(glm_model$pred[y == 0]) - 1
# Calculate sensitivity and false positive measure for glm logistic model
fity_ypos2 <- as.numeric(glm_model$pred[data$social_acceptance == 1]) - 1
fity_yneg2 <- as.numeric(glm_model$pred[data$social_acceptance == 0]) - 1
sort_fity2 <- as.numeric(sort(glm_model$pred)) - 1
sens2 <- 0
spec_c2 <- 0
for (i in length(sort_fity2):1){
sens2 <- (c(sens2, mean(fity_ypos2 >= sort_fity2[i])))
spec_c2 <- (c(spec_c2, mean(fity_yneg2 >= sort_fity2[i])))
}
plot(spec_c, sens, xlim = c(0, 1), ylim = c(0, 1), type = "l",
xlab = "false positive rate", ylab = "true positive rate", col = 'blue')
abline(0, 1, col= "black")
lines(spec_c2, sens2, col='green')
legend("topleft", legend = c("logit","random forest") , pch = 15, bty = 'n', col = c("blue","green"))
plot(spec_c, sens, xlim = c(0, 1), ylim = c(0, 1), type = "l",
xlab = "false positive rate", ylab = "true positive rate", col = 'blue')
abline(0, 1, col= "black")
lines(spec_c2, sens2, col='green')
legend("topleft", legend = c("logit") , pch = 15, bty = 'n', col = c("blue"))

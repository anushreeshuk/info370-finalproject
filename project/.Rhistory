#lets say we want to then color the graph by species of iris
#color is then specified in aes because it is a function of the dataset
g<-ggplot(data, aes(Sepal.Length, Sepal.Width, color=factor(Species)))+geom_point()
g<-g+labs(x="Sepal Length (cm)", y="Sepal Width (cm)", title='Sepal Length vs Sepal Width')
#legend title is ugly
g<- g+theme(legend.title=element_blank())
#and the legend dots are tiny
g+guides(colour = guide_legend(override.aes = list(size=4)))
#much better
#shall we change the background color?
g<- g+theme(panel.background = element_rect(fill = 'grey75'))
#hm you know I changed my mind about all the species being on one graph, lets put it on three
g<- g+facet_wrap(~Species, nrow=1)
g<-g+stat_smooth(method="lm", se=FALSE)
g<- g+facet_wrap(~Species, nrow=1)
g<- g+theme(panel.background = element_rect(fill = 'grey75'))
g+guides(colour = guide_legend(override.aes = list(size=4)))
g<-g+stat_smooth(method="lm", se=FALSE, col="black")
g
install.packages("ggthemes")
library(ggthemes)
g<- g+theme_economist()+scale_colour_economist()
g
install.packages('HSAUR')
install.packages('Epi')
library(HSAUR)
library(dplyr)
library(Epi)
##################################
# Case-control study #############
##################################
# The BCG dataset is part of the HSAUR package
str(BCG)
# Calculating the *odds of getting TB given the vaccine*. Should be < 1.
# Create columns that hold the number without TB
bcg <- BCG %>%
mutate(bcg.no.tb = BCGVacc - BCGTB, no.vacc.no.tb = NoVacc - NoVaccTB) %>%
mutate(odds.tb.bcg = BCGTB / bcg.no.tb, odds.tb.no.vacc = NoVaccTB / no.vacc.no.tb) %>%
mutate(odds.ratio = odds.tb.bcg / odds.tb.no.vacc)
# What is the distribution of odds ratios?
hist(bcg$odds.ratio)
# Do the odds ratios vary over time, or by Longitude?
plot(bcg$Year, bcg$odds.ratio)
plot(bcg$Latitude, bcg$odds.ratio)
# What are your conclusions about the effectiveness of the vaccine?
############################
# Cohort study #############
############################
# Using the built in birthwt data
# First, some summary stats: what is the average birth weight by smoker status?
by.smoker <- birthwt %>%
group_by(smoke) %>%
summarize(mean.wt = mean(bwt)) # seems worrysome...
View(BCG)
hist(bcg$odds.ratio)
plot(bcg$Year, bcg$odds.ratio)
plot(bcg$Latitude, bcg$odds.ratio)
View(birthwt)
birthweight
birthwt
install.packages('epiR')
install.packages('MASS')
install.packages("MASS")
library(MASS)
by.smoker <- birthwt %>%
group_by(smoke) %>%
summarize(mean.wt = mean(bwt)) # seems worrysome...
install.packages('HSAUR')
install.packages('Epi')
install.packages('MASS')
library(HSAUR)
library(dplyr)
library(Epi)
library(MASS)
##################################
# Case-control study #############
##################################
# The BCG dataset is part of the HSAUR package
str(BCG)
# Calculating the *odds of getting TB given the vaccine*. Should be < 1.
# Create columns that hold the number without TB
bcg <- BCG %>%
mutate(bcg.no.tb = BCGVacc - BCGTB, no.vacc.no.tb = NoVacc - NoVaccTB) %>%
mutate(odds.tb.bcg = BCGTB / bcg.no.tb, odds.tb.no.vacc = NoVaccTB / no.vacc.no.tb) %>%
mutate(odds.ratio = odds.tb.bcg / odds.tb.no.vacc)
# What is the distribution of odds ratios?
hist(bcg$odds.ratio)
# Do the odds ratios vary over time, or by Longitude?
plot(bcg$Year, bcg$odds.ratio)
plot(bcg$Latitude, bcg$odds.ratio)
# What are your conclusions about the effectiveness of the vaccine?
############################
# Cohort study #############
############################
# Using the built in birthwt data
# First, some summary stats: what is the average birth weight by smoker status?
by.smoker <- birthwt %>%
group_by(smoke) %>%
summarize(mean.wt = mean(bwt)) # seems worrysome...
# Mean birth weight by number of physician visits?
visits <- birthwt %>%
group_by(ftv) %>%
summarize(mean.wt = mean(bwt)) # not as clear
# Calculating risk:
# Attended 0 physician visits
GetRisk <- function(df, column) {
by.group <- df %>%
group_by_(column) %>%
summarize(low.weight = sum(low), total = n()) %>%
mutate(proportion = low.weight / total)
risk <- by.group[2, 4] / by.group[1,4] # matches epi book
return(risk$proportion)
}
# Get risk for smokers
GetRisk(birthwt, 'smoke')
# By hypertension
GetRisk(birthwt, 'ht') # wow!
# Risk if no physician visits
no.visits <- birthwt %>%
mutate(no.visits = ftv == 0)
GetRisk(no.visits, 'no.visits') # Risky!
# Get risk by age
by.age <- birthwt %>%
mutate(under.20 = age < 20)
GetRisk(by.age, 'under.20')
# Two other checks of your choice.
# What is the relative risk of having a low-birth weight child if the mother is under 20?
# From epiR package
# https://cran.r-project.org/web/packages/epiR/epiR.pdf
install.packages('epiR')
install.packages("MASS")
#install.packages('HSAUR')
#install.packages('Epi')
#install.packages('MASS')
library(HSAUR)
library(dplyr)
library(Epi)
library(MASS)
##################################
# Case-control study #############
##################################
# The BCG dataset is part of the HSAUR package
str(BCG)
# Calculating the *odds of getting TB given the vaccine*. Should be < 1.
# Create columns that hold the number without TB
bcg <- BCG %>%
mutate(bcg.no.tb = BCGVacc - BCGTB, no.vacc.no.tb = NoVacc - NoVaccTB) %>%
mutate(odds.tb.bcg = BCGTB / bcg.no.tb, odds.tb.no.vacc = NoVaccTB / no.vacc.no.tb) %>%
mutate(odds.ratio = odds.tb.bcg / odds.tb.no.vacc)
# What is the distribution of odds ratios?
hist(bcg$odds.ratio)
# Do the odds ratios vary over time, or by Longitude?
plot(bcg$Year, bcg$odds.ratio)
plot(bcg$Latitude, bcg$odds.ratio)
# What are your conclusions about the effectiveness of the vaccine?
############################
# Cohort study #############
############################
# Using the built in birthwt data
# First, some summary stats: what is the average birth weight by smoker status?
by.smoker <- birthwt %>%
group_by(smoke) %>%
summarize(mean.wt = mean(bwt)) # seems worrysome...
# Mean birth weight by number of physician visits?
visits <- birthwt %>%
group_by(ftv) %>%
summarize(mean.wt = mean(bwt)) # not as clear
# Calculating risk:
# Attended 0 physician visits
GetRisk <- function(df, column) {
by.group <- df %>%
group_by_(column) %>%
summarize(low.weight = sum(low), total = n()) %>%
mutate(proportion = low.weight / total)
risk <- by.group[2, 4] / by.group[1,4] # matches epi book
return(risk$proportion)
}
# Get risk for smokers
GetRisk(birthwt, 'smoke')
# By hypertension
GetRisk(birthwt, 'ht') # wow!
# Risk if no physician visits
no.visits <- birthwt %>%
mutate(no.visits = ftv == 0)
GetRisk(no.visits, 'no.visits') # Risky!
# Get risk by age
by.age <- birthwt %>%
mutate(under.20 = age < 20)
GetRisk(by.age, 'under.20')
# Two other checks of your choice.
# What is the relative risk of having a low-birth weight child if the mother is under 20?
# From epiR package
# https://cran.r-project.org/web/packages/epiR/epiR.pdf
#install.packages('epiR')
library(epiR)
dat1 <- birthwt; head(dat1)
## Generate a table of cell frequencies. First set the levels of the outcome
## and the exposure so the frequencies in the 2 by 2 table come out in the
## conventional format:
dat1$low <- factor(dat1$low, levels = c(1,0))
dat1$smoke <- factor(dat1$smoke, levels = c(1,0))
dat1$race <- factor(dat1$race, levels = c(1,2,3))
tab1 <- table(dat1$smoke, dat1$low, dnn = c("Smoke", "Low BW"))
print(tab1)
## Compute the incidence risk ratio and other measures of association:
epi.2by2(dat = tab1, method = "cohort.count",
conf.level = 0.95, units = 100, homogeneity = "breslow.day",
outcome = "as.columns")
############################
# Cohort study #############
############################
# Cohort study -- calculate relative risk
data(diet)
# Are people with high energy intake more likely to get coronary heart disease?
table(diet$chd)
# Compute the number of CHD instances that occur in each energy group
by.energy <- diet %>%
group_by(energy.grp) %>%
summarize(chd.total = sum(chd), pop = n()) %>%
mutate(proportion = chd.total / pop)
# Calculate the risk ratio (relative risk):
high.energy.risk <- by.energy[2, 4] / by.energy[1,4] # That's not what I expected...
# Calculate if being in the top 1/3 of the fat intake is a risk factor
by.fat <- diet %>%
mutate(fat.rank = rank(desc(fat))) %>%
mutate(top.fat = fat.rank < max(fat.rank)/10)
by.fat <- by.fat %>%
group_by(top.fat) %>%
summarize(chd.total = sum(chd), pop = n()) %>%
mutate(proportion = chd.total / pop)
fat.risk <- by.fat[2,4] / by.fat[1,4] # That's not what I expected...
############################
# Endometial cancer ########
############################
library(Epi)
data("bdendo")
# Calculate odds ratios
gall.tab <- table(bdendo$d, bdendo$gall)
epitab(gall.tab, method="oddsratio")
View(birthwt)
dat1 <- birthwt; head(dat1)
View(dat1)
dat1$low <- factor(dat1$low, levels = c(1,0))
dat1$smoke <- factor(dat1$smoke, levels = c(1,0))
dat1$race <- factor(dat1$race, levels = c(1,2,3))
?MASS
??MASS
??HSAUR
?HSAUR
View(anorexia)
library(MASS)
data <- mutate(anorexia, weight.change=Prewt + Postwt)
View(data)
data <- mutate(anorexia, weight.change=Prewt - Postwt)
data <- mutate(anorexia, weight.change=Postwt - Prewt) #
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data <- as.vector(anorexia)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
anorexia$Postwt <- as.numeric(as.character(anorexia$Postwt))
source('~/.active-rstudio-document', echo=TRUE)
anorexia$Treat <- as.character(anorexia$Treat)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(weight.data)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
weight.data <- mutate(anorexia, weight.change = Postwt - Prewt)#Positive numbers mean that treatment worked!
anorexia$weight.change <- as.numeric(as.character(anorexia$weight.change))
source('~/.active-rstudio-document', echo=TRUE)
weight.data <- mutate(anorexia, weight.change = Postwt - Prewt)#Positive numbers mean that treatment worked!
anorexia$weight.change <- as.numeric(as.character(anorexia$weight.change))
source('~/.active-rstudio-document', echo=TRUE)
anorex <- as.data.frame(anorexia)
weight.data <- mutate(anorex, weight.change = Postwt - Prewt)#Positive numbers mean that treatment worked!
source('~/.active-rstudio-document', echo=TRUE)
str(anorexia)
weight.data <- mutate(anorex, weight.change = Postwt - Prewt) %>% #Positive numbers mean that treatment worked!
filter(weight.change > 0) %>%
group_by(weight.change) %>%
summarise(num.treated = n)
anorexia$Treat <- as.character(anorexia$Treat)
str(anorexia)
View(BCG)
source('~/.active-rstudio-document', echo=TRUE)
library(MASS)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library (dplyr)
source('~/.active-rstudio-document', echo=TRUE)
weight.decrease <- filter(weight.change <= 0)
data <- mutate(anorexia, weight.change = Postwt - Prewt) %>% #Positive numbers mean that treatment worked!
weight.decrease <- filter(weight.change <= 0)
data <- mutate(anorexia, weight.change = Postwt - Prewt) %>% #Positive numbers mean that treatment worked!
weight.decrease <- filter(weight.change <= 0)
data <- mutate(anorexia, weight.change = Postwt - Prewt) #Positive numbers mean that treatment worked!
weight.decrease <- filter(weight.change <= 0)
View(data)
weight.decrease <- filter(data, weight.change <= 0)
View(weight.decreast)
View(weight.decrease)
getwd()
setwd("C:/Users/Rosemary/Documents/TA Stuff/Winter2017/L3-Ratios/")
getwd()
library(readr)
anorexia <- read_csv("~/TA Stuff/Winter2017/labs/L3-Ratios/anorexia.csv",
col_names = FALSE)
View(anorexia)
data <- mutate(anorexia, weight.change = X3 - X2) #Positive numbers mean that treatment worked!
weight.decrease <- filter(data, weight.change <= 0)
source('~/TA Stuff/Winter2017/labs/L3-Ratios/L3-Complete.R', echo=TRUE)
weight.decrease <- filter(data, weight.change <= 0, X1 == Cont)
weight.decrease <- filter(data, weight.change <= 0, X1 == "Cont")
source('~/TA Stuff/Winter2017/labs/L3-Ratios/L3-Complete.R', echo=TRUE)
source('~/TA Stuff/Winter2017/labs/L3-Ratios/L3-Complete.R', echo=TRUE)
weight.decrease <- filter(data, weight.change <= 0)
nrow(weight.decrease)
weight.decrease <- filter(data, weight.change <= 0, X1 = "Cont")
weight.decrease <- filter(data, weight.change <= 0, X1 == "Cont")
nrow(weight.decrease)
compareLength <- function(a, b){
lengthA <- length(a)
lengthB <- length(b)
return("The difference in lengths is " lengthA - lengthB)
}
source('~/.active-rstudio-document', echo=TRUE)
compareLength <- function(a, b){
lengthA <- length(a)
lengthB <- length(b)
return("The difference in lengths is " + (lengthA - lengthB))
}
compareLength <- function(a, b){
lengthA <- length(a)
lengthB <- length(b)
return("The difference in lengths is " + (lengthA - lengthB))
}
# Pass two vectors of different length to your `CompareLength` function
a <- c(1:3)
b <- c(1:7)
compareLength(a,b)
a <- c(1:3)
b <- c(1:7)
compareLength(a,b)
?length
length(a)
length(a) - length(b)
?absolute
?abs
compareLength <- function(a, b){
lengthA <- length(a)
lengthB <- length(b)
return("The difference in lengths is " + abs(lengthA - lengthB))
}
compareLength(a,b)
difference <- abs(lengthA - lengthB)
difference <- abs(length(a) - length(b))
difference
return("The difference in lengths is " + abs(lengthA - lengthB))
return("The difference in lengths is " + difference)
?string
?paste
return(paste("The difference in lengths is ", difference)
}
# Pass two vectors of different length to your `CompareLength` function
a <- c(1:3)
b <- c(1:7)
compareLength(a,b)
return(paste("The difference in lengths is ", difference))
compareLength <- function(a, b){
difference <- abs(length(a) - length(b))
return(paste("The difference in lengths is ", difference))
}
compareLength(a,b)
source('~/.active-rstudio-document', echo=TRUE)
compareLength(a,b)
source('~/.active-rstudio-document', echo=TRUE)
compareLength(a,b)
describeDifference <- function(a,b) {
difference <- length(a) - length(b)
if(difference > 0) {
return(paste("Your first vector is longer by", difference, "elements."))
} else if(difference < 0) {
return(paste("Your second vector is longer by", abs(difference), "elements."))
} else {
return("Your vectors are equal!")
}
}
describeDifference(a,b)
describeDifference <- function(a,b) {
difference <- length(a) - length(b)
if(difference > 0) {
result <- "first"
} else if(difference < 0) {
result <- "second"
} else {
return(paste("Your",result,"vector is longer by", abs(difference), "elements"))
}
}
describeDifference(a,b)
describeDifference(a,b)
describeDifference <- function(a,b) {
difference <- length(a) - length(b)
if(difference > 0) {
result <- "first"
} else if(difference < 0) {
result <- "second"
}
return(paste("Your",result,"vector is longer by", abs(difference), "elements"))
}
describeDifference(a,b)
describeDifference <- function(a,b) {
difference <- length(a) - length(b)
result <- ""
if(difference > 0) {
result <- "first"
} else if(difference < 0) {
result <- "second"
}
return(paste("Your", result,"vector is longer by", abs(difference), "elements"))
}
c <- c(1:10)
d <- c(1:4)
describeDifference(c,d)
c <- c(1:4)
describeDifference(c,d)
describeDifference <- function(a,b) {
difference <- length(a) - length(b)
if(difference > 0) {
result <- "first"
} else if(difference < 0) {
result <- "second"
}
return(paste("Your", result,"vector is longer by", abs(difference), "elements"))
}
describeDifference(c,d)
describeDifference <- function(a,b) {
difference <- length(a) - length(b)
if(difference > 0) {
result <- deparse(substitute(a))
} else if(difference < 0) {
result <- deparse(substitute(b))
}
return(paste(result,"vector is longer by", abs(difference), "elements"))
}
describeDifference(a,b)
source('~/TA Stuff/Spring2017/L2-Complete.R', echo=TRUE)
titanic <- Titanic
setwd("C:/Users/Rosemary/Documents/Info/370/info370-finalproject")
read.csv("./data/raw_data.csv")
setwd("C:/Users/Rosemary/Documents/Info/370/info370-finalproject")
getwd()
setwd("C:/Users/Rosemary/Documents/Info/370/info370-finalproject/project")
read.csv("./data/raw_data.csv")
library(dplyr)
install.packages("dplyr")
View(raw.data)
raw.data <- read.csv("./data/raw_data.csv")
View(raw.data)
raw.data[3,4]
raw.data <- read.csv("./data/raw_data.csv", stringsAsFactors = FALSE)
raw.data[3,4]
raw.data[3,5]
shiny::runApp()
